import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

VOCABULARY = [
    {"word": "persistent", "meaning": "—É–ø–æ—Ä–Ω—ã–π", "example": "She is a persistent learner."},
    {"word": "curious", "meaning": "–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π", "example": "He is always curious about how things work."},
    {"word": "efficient", "meaning": "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π", "example": "She is an efficient worker."},
    {"word": "diligent", "meaning": "—Å—Ç–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π", "example": "The diligent student always completes his homework on time."},
    {"word": "ambitious", "meaning": "–∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π", "example": "She has ambitious plans for her career."},
    {"word": "reliable", "meaning": "–Ω–∞–¥–µ–∂–Ω—ã–π", "example": "He is a reliable friend who always keeps his promises."},
    {"word": "versatile", "meaning": "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π", "example": "She is a versatile musician who plays multiple instruments."},
    {"word": "adaptable", "meaning": "–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π", "example": "Being adaptable helps him succeed in new environments."},
    {"word": "resilient", "meaning": "—Å—Ç–æ–π–∫–∏–π", "example": "Despite setbacks, she remained resilient and kept moving forward."},
    {"word": "meticulous", "meaning": "–ø–µ–¥–∞–Ω—Ç–∏—á–Ω—ã–π", "example": "His meticulous attention to detail ensures high-quality work."},
    {"word": "innovative", "meaning": "–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π", "example": "The company is known for its innovative approach to technology."},
    {"word": "tenacious", "meaning": "—Ü–µ–ø–∫–∏–π", "example": "Her tenacious attitude helped her overcome many challenges."},
    {"word": "proactive", "meaning": "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π", "example": "A proactive employee takes action before problems arise."},
    {"word": "resourceful", "meaning": "–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π", "example": "He is resourceful and always finds creative solutions."},
    {"word": "conscientious", "meaning": "–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–π", "example": "She is a conscientious worker who never cuts corners."},
]


TOKEN = '7269437234:AAEMtf5S6SQu1JXpITlYhGgrFzJBBInQT_I'

# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‡ºÑÀñ¬∞.‚òïÔ∏è.‡≥É‡øîüìö*:ÔΩ• –ú–∞—Ä–∞—Ñ–æ–Ω—ã", callback_data='join')],
        [InlineKeyboardButton("êôö‚Äß‚ÇäÀöüìí‚ú© ‚ÇäÀö‚òÅÔ∏è‚äπ‚ô° –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞", callback_data='task')],
        [InlineKeyboardButton("‚ÑπÔ∏è –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data='faq')],
        [InlineKeyboardButton("‚ÇäÀö.üéß ‚ú©ÔΩ°‚òï ü§é –£—Ä–æ–∫–∏ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É", callback_data='lessons')],
        [InlineKeyboardButton("Àô‚úßÀñ¬∞üéì ‡ºò‚ãÜÔΩ° ¬∞ –ö—É—Ä—Å—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É", callback_data='courses')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("ÀéÀäÀó‚ãÜÔΩ°¬∞‚ú©üìÑ–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=reply_markup)

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ùì –ï—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π?", callback_data='faq_place')],
        [InlineKeyboardButton(" üíµ–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∑–∞–Ω—è—Ç–∏–µ?", callback_data='faq_price')],
        [InlineKeyboardButton(" üìö–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?", callback_data='faq_prob')],
        [InlineKeyboardButton("‚ùì–ß—Ç–æ –∑–∞ –∫—É—Ä—Å –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É?", callback_data='faq_course')],
        [InlineKeyboardButton("üìö–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data='faq_reviews')],
        [InlineKeyboardButton("üìùüìöüôÜüèª‚Äç‚ôÄÔ∏è–û –ö—Ä–∏—Å—Ç–∏–Ω–µ", callback_data='faq_kristina')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìå –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    query = update.callback_query
    await query.answer()
    pass

    if query.data == 'join':
        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
        await query.edit_message_text(
            "üéì –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ä–∞—Ñ–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç—Å—è 13 –∏—é–ª—è!\n–¶–µ–Ω–∞: 1000 —Ä—É–±–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é\n400 —Ä—É–±–ª–µ–π –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏\n–ù–∞–ø–∏—à–∏—Ç–µ @goat_eto_koza —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.",
            reply_markup=back_button
        )

    elif query.data == 'task':
        vocab = random.choice(VOCABULARY)
        text = f"üß† –°–ª–æ–≤–æ –¥–Ω—è: *{vocab['word']}* (adj.)\n–ó–Ω–∞—á–µ–Ω–∏–µ: {vocab['meaning']}\n–ü—Ä–∏–º–µ—Ä: {vocab['example']}"
        
        keyboard = [
            [InlineKeyboardButton("üîÅ –î—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", callback_data='task')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")

    elif query.data == 'lessons':
        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
        await query.edit_message_text(
            "üéì–£—Ä–æ–∫–∏ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —á–µ—Ä–µ–∑ Zoom. –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: @goat_eto_koza.",
            reply_markup=back_button
        )
    
    elif query.data == 'courses':
        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]])
        await query.edit_message_text(
            "üéì –ù–∞—à–∏ –∫—É—Ä—Å—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É:\n\nüåü –ë–∏–∑–Ω–µ—Å-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π (—Å—Ç–∞—Ä—Ç –≤ –∞–≤–≥—É—Å—Ç–µ-—Å–µ–Ω—Ç—è–±—Ä–µ 2025)\n- –¶–µ–Ω–∞: 5000‚ÇΩ\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π\n- –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: @goat_eto_koza",
            reply_markup=back_button
        )

    elif query.data == 'faq':
        keyboard = [
            [InlineKeyboardButton("‚ùì –ï—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π?", callback_data='faq_place')],
            [InlineKeyboardButton("üíµ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∑–∞–Ω—è—Ç–∏–µ?", callback_data='faq_price')],
            [InlineKeyboardButton("üìö –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?", callback_data='faq_prob')],
            [InlineKeyboardButton("üìö –•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data='faq_reviews')],
            [InlineKeyboardButton("üìùüìöüôÜüèª‚Äç‚ôÄÔ∏è –û –ö—Ä–∏—Å—Ç–∏–Ω–µ", callback_data='faq_kristina')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìå –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=reply_markup)

    elif query.data == 'faq_place':
        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='faq')]])
        await query.edit_message_text(
            "üìù –ù–∞ –∏—é–Ω—å 2025 –º–µ—Å—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ @goat_eto_koza —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å –æ—á–µ—Ä–µ–¥—å!",
            reply_markup=back_button
        )

    elif query.data == 'faq_price':
        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='faq')]])
        await query.edit_message_text(
            "üåü –ó–∞–Ω—è—Ç–∏—è —Å—Ç–æ—è—Ç 1300 —Ä—É–±–ª–µ–π/—á–∞—Å.",
            reply_markup=back_button
        )

    elif query.data == 'faq_prob':
        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='faq')]])
        await query.edit_message_text(
            "üí∞ –ü—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è.",
            reply_markup=back_button
        )

    elif query.data == 'faq_reviews':
        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='faq')]])
        await query.edit_message_text(
            "üåü –û—Ç–∑—ã–≤—ã: https://docs.google.com/document/d/1ROCOQZK9hcrrPSy-VKbBQR_VbUQq3mfq8hv4REBzbQA/edit?tab=t.0\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –í–ö: https://vk.com/market/product/individualnye-zanyatia-po-angliyskomu-yazyku-188039802-4150462",
            reply_markup=back_button
        )

    elif query.data == 'faq_kristina':
        back_button = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='faq')]])
        await query.edit_message_text(
            "–ö—Ä–∏—Å—Ç–∏–Ω–∞ ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª–æ–≤. –ü—Ä–µ–ø–æ–¥–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å 2018, —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ TESOL, –≥–æ—Ç–æ–≤–ª—é –∫ IELTS –∏ SAT. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: @goat_eto_koza.",
            reply_markup=back_button
        )

    elif query.data == 'back_to_menu':
        keyboard = [
            [InlineKeyboardButton("‡ºÑÀñ¬∞.‚òïÔ∏è.‡≥É‡øîüìö*:ÔΩ• –ú–∞—Ä–∞—Ñ–æ–Ω—ã", callback_data='join')],
            [InlineKeyboardButton("êôö‚Äß‚ÇäÀöüìí‚ú© ‚ÇäÀö‚òÅÔ∏è‚äπ‚ô° –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞", callback_data='task')],
            [InlineKeyboardButton("‚ÑπÔ∏è –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã", callback_data='faq')],
            [InlineKeyboardButton("‚ÇäÀö.üéß ‚ú©ÔΩ°‚òï ü§é –£—Ä–æ–∫–∏ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É", callback_data='lessons')],
            [InlineKeyboardButton("Àô‚úßÀñ¬∞üéì ‡ºò‚ãÜÔΩ° ¬∞ –ö—É—Ä—Å—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É", callback_data='courses')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("ÀéÀäÀó‚ãÜÔΩ°¬∞‚ú©üìÑ–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=reply_markup)
        

# Run the bot
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button))
app.add_handler(CommandHandler("back", back))

app.run_polling()
